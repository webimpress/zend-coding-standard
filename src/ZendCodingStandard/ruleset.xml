<?xml version="1.0" encoding="UTF-8"?>
<ruleset xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:noNamespaceSchemaLocation="../../vendor/squizlabs/php_codesniffer/phpcs.xsd"
         name="ZendCodingStandard">
    <description>The ZendFramework coding standard.</description>

    <!-- Import PSR-2 coding standard (base) -->
    <rule ref="PSR2">
        <!-- Checked by SlevomatCodingStandard.Namespaces.UseSpacing -->
        <exclude name="PSR2.Namespaces.UseDeclaration.SpaceAfterLastUse"/>
        <!-- Checked by SlevomatCodingStandard.Namespaces.NamespaceSpacing -->
        <exclude name="PSR2.Namespaces.NamespaceDeclaration.BlankLineAfter"/>
        <!-- Checked by WebimpressCodingStandard.WhiteSpace.BraceBlankLine -->
        <exclude name="PSR2.Classes.ClassDeclaration.CloseBraceAfterBody"/>
        <exclude name="PSR2.Methods.FunctionClosingBrace.SpacingBeforeClose"/>
        <exclude name="Squiz.WhiteSpace.ControlStructureSpacing.SpacingAfterOpen"/>
        <exclude name="Squiz.WhiteSpace.ControlStructureSpacing.SpacingBeforeClose"/>
        <!-- Replaced by WebimpressCodingStandard.WhiteSpace.CommaSpacing -->
        <exclude name="Squiz.Functions.FunctionDeclarationArgumentSpacing.SpaceBeforeComma"/>
        <exclude name="Squiz.Functions.FunctionDeclarationArgumentSpacing.NoSpaceBeforeArg"/>
        <!-- Replaced by WebimpressCodingStandard.WhiteSpace.ScopeIndent -->
        <exclude name="Generic.WhiteSpace.ScopeIndent"/>
        <exclude name="PSR2.Methods.FunctionCallSignature.Indent"/>
        <exclude name="PSR2.Methods.FunctionCallSignature.OpeningIndent"/>
        <exclude name="Squiz.Functions.MultiLineFunctionDeclaration.Indent"/>
        <exclude name="Squiz.WhiteSpace.ScopeClosingBrace.Indent"/>
    </rule>

    <!-- Force array element indentation with 4 spaces -->
    <rule ref="Generic.Arrays.ArrayIndent"/>
    <!-- Forbid `array(...)` -->
    <rule ref="Generic.Arrays.DisallowLongArraySyntax"/>
    <!-- Align double arrows -->
    <rule ref="WebimpressCodingStandard.Arrays.DoubleArrow">
        <properties>
            <property name="maxPadding" value="50"/>
        </properties>
    </rule>
    <!-- Format arrays -->
    <rule ref="WebimpressCodingStandard.Arrays.Format"/>
    <!-- Add trailing commas to all array elements -->
    <rule ref="WebimpressCodingStandard.Arrays.TrailingArrayComma"/>
    <!-- Forbid blank line after opening braces and before closing braces -->
    <rule ref="WebimpressCodingStandard.WhiteSpace.BraceBlankLine"/>

    <!-- Forbid FQN for classes/traits/interfaces/constants/functions -->
    <rule ref="WebimpressCodingStandard.PHP.DisallowFqn"/>
    <!-- Import internal constants -->
    <rule ref="WebimpressCodingStandard.PHP.ImportInternalConstant"/>
    <!-- Import internal functions -->
    <rule ref="WebimpressCodingStandard.PHP.ImportInternalFunction"/>
    <!-- Format anonymous class declaration -->
    <rule ref="WebimpressCodingStandard.Classes.AnonymousClassDeclaration"/>
    <!-- Forbid null values for class properties -->
    <rule ref="WebimpressCodingStandard.Classes.NoNullValues"/>
    <!-- Comments at the end of the line, with at least single space -->
    <rule ref="WebimpressCodingStandard.Commenting.Placement"/>

    <!-- Requires one space after namespace keyword -->
    <rule ref="WebimpressCodingStandard.WhiteSpace.Namespace"/>
    <!-- Forbid spaces around namespace separator -->
    <rule ref="WebimpressCodingStandard.WhiteSpace.NamespaceSeparator"/>

    <!-- One space after break/continue with argument, remove redundant 1 -->
    <rule ref="WebimpressCodingStandard.ControlStructures.BreakAndContinue"/>
    <!-- Forbid continue in switch; use break instead -->
    <rule ref="WebimpressCodingStandard.ControlStructures.ContinueInSwitch"/>

    <!-- Forbid boolean operator at the end of the line -->
    <rule ref="WebimpressCodingStandard.Operators.BooleanOperator"/>
    <!-- Formatting of ternary operator - content must be after ?/:, not in new line -->
    <rule ref="WebimpressCodingStandard.Operators.TernaryOperator"/>

    <!-- Abstract class must have Abstract* prefix -->
    <rule ref="WebimpressCodingStandard.NamingConventions.AbstractClass"/>
    <!-- Exception must have *Exception suffix -->
    <rule ref="WebimpressCodingStandard.NamingConventions.Exception"/>
    <!-- Interface must have *Interface suffix -->
    <rule ref="WebimpressCodingStandard.NamingConventions.Interface"/>
    <!-- Trait must have *Traif suffix -->
    <rule ref="WebimpressCodingStandard.NamingConventions.Trait"/>
    <!-- Require camelCase variable names -->
    <rule ref="WebimpressCodingStandard.NamingConventions.ValidVariableName"/>

    <!-- Use the correct class name, i.e. DateTime not Datetime, etc -->
    <rule ref="WebimpressCodingStandard.PHP.CorrectClassNameCase"/>

    <!-- Only one blank line allowed -->
    <rule ref="WebimpressCodingStandard.WhiteSpace.BlankLine"/>

    <!-- Indents formatting -->
    <rule ref="WebimpressCodingStandard.WhiteSpace.ScopeIndent">
        <properties>
            <property name="alignObjectOperators" value="false"></property>
        </properties>
    </rule>

    <!-- Detects for-loops that can be simplified to a while-loop -->
    <rule ref="Generic.CodeAnalysis.ForLoopShouldBeWhileLoop"/>
    <!-- Detects unconditional if- and elseif-statements -->
    <rule ref="Generic.CodeAnalysis.UnconditionalIfStatement"/>
    <!-- Disallow spaces before/after incrementation/decrementation operators -->
    <rule ref="Generic.WhiteSpace.IncrementDecrementSpacing"/>

    <!-- Forbid inline comments after closing curly bracket, like // end if etc -->
    <rule ref="WebimpressCodingStandard.Commenting.NoInlineCommentAfterCurlyClose"/>
    <!-- Use correct case of default PHPDocs and PHPUnit tags @var not @VAR etc -->
    <rule ref="WebimpressCodingStandard.Commenting.TagCase"/>
    <!-- Heredoc/nowdoc tag uppercase without spaces -->
    <rule ref="WebimpressCodingStandard.Formatting.Heredoc"/>

    <!-- Forbid space after splat operator -->
    <rule ref="WebimpressCodingStandard.Formatting.NoSpaceAfterSplat"/>
    <!-- Forbid reference operator before new, and formatting of the reference operator -->
    <rule ref="WebimpressCodingStandard.Formatting.Reference"/>
    <!-- Use ::class instead of class string reference -->
    <rule ref="WebimpressCodingStandard.Formatting.StringClassReference"/>
    <!-- Single line between methods in class -->
    <rule ref="WebimpressCodingStandard.Methods.LineAfter"/>

    <!-- Forbid space before comma, require single space after comma -->
    <rule ref="WebimpressCodingStandard.WhiteSpace.CommaSpacing"/>

    <!-- Forbid concatenation character at the end of the line -->
    <rule ref="WebimpressCodingStandard.Strings.NoConcatenationAtTheEnd"/>

    <!-- Forbid duplicate classes -->
    <rule ref="Generic.Classes.DuplicateClassName"/>
    <!-- Forbid empty statements -->
    <rule ref="Generic.CodeAnalysis.EmptyStatement">
        <!-- But allow empty catch -->
        <exclude name="Generic.CodeAnalysis.EmptyStatement.DetectedCatch"/>
    </rule>
    <!-- Forbid final methods in final classes -->
    <rule ref="Generic.CodeAnalysis.UnnecessaryFinalModifier"/>
    <!-- Forbid useless empty method overrides -->
    <!--
    The sniff is disabled because it's not working properly in case we change
    default value of parameters.
    See: https://github.com/zendframework/zend-coding-standard/issues/12
         https://github.com/squizlabs/PHP_CodeSniffer/issues/519
    <rule ref="Generic.CodeAnalysis.UselessOverridingMethod"/>
    -->
    <!-- Forbid inline HTML in PHP code -->
    <rule ref="Generic.Files.InlineHTML"/>
    <!-- Force Unix LF (linefeed) line ending -->
    <rule ref="Generic.Files.LineEndings">
        <properties>
            <property name="eolChar" value="\n"/>
        </properties>
    </rule>
    <!-- Allow 1 space around operators -->
    <rule ref="Generic.Formatting.MultipleStatementAlignment">
        <properties>
            <property name="error" value="true"/>
            <property name="maxPadding" value="50"/>
        </properties>
    </rule>
    <!-- Force whitespace after a type cast -->
    <rule ref="Generic.Formatting.SpaceAfterCast"/>
    <!-- Force whitespace after `!` -->
    <rule ref="Generic.Formatting.SpaceAfterNot"/>
    <!-- Forbid PHP 4 constructors -->
    <rule ref="Generic.NamingConventions.ConstructorName"/>
    <!-- Forbid backtick operator -->
    <rule ref="Generic.PHP.BacktickOperator"/>
    <!-- Forbid any content before opening tag -->
    <rule ref="Generic.PHP.CharacterBeforePHPOpeningTag"/>
    <!-- Forbid deprecated functions -->
    <rule ref="Generic.PHP.DeprecatedFunctions"/>
    <!-- Forbid short open tag -->
    <rule ref="Generic.PHP.DisallowShortOpenTag">
        <!-- But allow short echo tags -->
        <exclude name="Generic.PHP.DisallowShortOpenTag.EchoFound"/>
    </rule>
    <!-- Forbid alias functions, i.e. `sizeof()`, `delete()` -->
    <rule ref="Generic.PHP.ForbiddenFunctions">
        <properties>
            <property name="forbiddenFunctions" type="array">
                <element key="chop" value="rtrim"/>
                <element key="close" value="closedir"/>
                <element key="compact" value="null"/>
                <element key="delete" value="unset"/>
                <element key="doubleval" value="floatval"/>
                <element key="extract" value="null"/>
                <element key="fputs" value="fwrite"/>
                <element key="ini_alter" value="ini_set"/>
                <element key="is_double" value="is_float"/>
                <element key="is_integer" value="is_int"/>
                <element key="is_long" value="is_int"/>
                <element key="is_null" value="null"/>
                <element key="is_real" value="is_float"/>
                <element key="is_writeable" value="is_writable"/>
                <element key="join" value="implode"/>
                <element key="key_exists" value="array_key_exists"/>
                <element key="pos" value="current"/>
                <element key="settype" value="null"/>
                <element key="show_source" value="highlight_file"/>
                <element key="sizeof" value="count"/>
                <element key="strchr" value="strstr"/>
            </property>
        </properties>
    </rule>
    <!-- Forbid goto instruction -->
    <rule ref="Generic.PHP.DiscourageGoto"/>
    <!-- Force PHP 7 param and return types to be lowercased -->
    <rule ref="Generic.PHP.LowerCaseType"/>
    <!-- Forbid `php_sapi_name()` function, use PHP_SAPI -->
    <rule ref="Generic.PHP.SAPIUsage"/>
    <!-- Forbid useless inline string concatenation -->
    <rule ref="Generic.Strings.UnnecessaryStringConcat">
        <!-- But multiline is useful for readability -->
        <properties>
            <property name="allowMultiline" value="true"/>
        </properties>
    </rule>
    <!-- Forbid comments starting with # -->
    <rule ref="PEAR.Commenting.InlineComment"/>
    <!-- Disallow else if in favor of elseif -->
    <rule ref="PSR2.ControlStructures.ElseIfDeclaration.NotAllowed">
        <type>error</type>
    </rule>
    <!-- Require presence of constant visibility -->
    <rule ref="SlevomatCodingStandard.Classes.ClassConstantVisibility">
        <properties>
            <property name="fixable" value="true"/>
        </properties>
    </rule>
    <!-- Require usage of ::class instead of __CLASS__, get_class(), get_class($this), get_called_class() and get_parent_class() -->
    <rule ref="SlevomatCodingStandard.Classes.ModernClassNameReference"/>
    <!-- Sort traits alphabetically -->
    <rule ref="WebimpressCodingStandard.Classes.AlphabeticallySortedTraits"/>
    <!-- Forbid multiple traits by declaration -->
    <rule ref="WebimpressCodingStandard.Classes.TraitUsage"/>
    <!-- Forbid dead code -->
    <rule ref="SlevomatCodingStandard.Classes.UnusedPrivateElements"/>
    <!-- Forbid useless annotations - Git and LICENCE file provide more accurate information -->
    <rule ref="SlevomatCodingStandard.Commenting.ForbiddenAnnotations">
        <properties>
            <property name="forbiddenAnnotations" type="array">
                <element value="@api"/>
                <element value="@author"/>
                <element value="@category"/>
                <element value="@created"/>
                <element value="@package"/>
                <element value="@subpackage"/>
                <element value="@version"/>
                <element value="@expectedException"/>
                <element value="@expectedExceptionCode"/>
                <element value="@expectedExceptionMessage"/>
                <element value="@expectedExceptionMessageRegExp"/>
            </property>
        </properties>
    </rule>
    <!-- Forbid empty comments -->
    <rule ref="SlevomatCodingStandard.Commenting.EmptyComment"/>
    <!-- Forbid useless comments -->
    <rule ref="SlevomatCodingStandard.Commenting.ForbiddenComments">
        <properties>
            <property name="forbiddenCommentPatterns" type="array">
                <element value="~^(?:(?!private|protected|static)\S+ )?(?:con|de)structor\.\z~i"/>
                <element value="~^Created by \S+\.\z~i"/>
                <element value="~^\S+ [gs]etter\.\z~i"/>
            </property>
        </properties>
    </rule>
    <!-- report invalid format of inline phpDocs with @var -->
    <rule ref="SlevomatCodingStandard.Commenting.InlineDocCommentDeclaration"/>
    <!-- Require comments with single line @var written as one-liners -->
    <rule ref="SlevomatCodingStandard.Commenting.RequireOneLinePropertyDocComment"/>
    <!-- Forbid weak comparisons -->
    <rule ref="SlevomatCodingStandard.ControlStructures.DisallowEqualOperators"/>
    <!-- Require language constructs without parentheses -->
    <rule ref="SlevomatCodingStandard.ControlStructures.LanguageConstructWithParentheses"/>
    <!-- Require new instances with parentheses -->
    <rule ref="PSR12.Classes.ClassInstantiation"/>
    <!-- Require usage of null coalesce operator when possible -->
    <rule ref="SlevomatCodingStandard.ControlStructures.RequireNullCoalesceOperator"/>
    <!-- Forbid useless unreachable catch blocks -->
    <rule ref="SlevomatCodingStandard.Exceptions.DeadCatch"/>
    <!-- Require using Throwable instead of Exception -->
    <rule ref="SlevomatCodingStandard.Exceptions.ReferenceThrowableOnly"/>
    <!-- Forbid unused variables passed to closures via `use` -->
    <rule ref="SlevomatCodingStandard.Functions.UnusedInheritedVariablePassedToClosure"/>
    <!-- Require use statements to be alphabetically sorted -->
    <rule ref="WebimpressCodingStandard.Namespaces.AlphabeticallySortedUses"/>
    <!-- Require lowercase function and const keywords in imports with one space after -->
    <rule ref="WebimpressCodingStandard.Namespaces.ConstAndFunctionKeywords"/>
    <!-- Forbid unused use statements -->
    <rule ref="WebimpressCodingStandard.Namespaces.UnusedUseStatement"/>
    <!-- Forbid superfluous leading backslash in use statements -->
    <rule ref="WebimpressCodingStandard.Namespaces.UseDoesNotStartWithBackslash"/>
    <!-- Forbid fancy group uses -->
    <rule ref="SlevomatCodingStandard.Namespaces.DisallowGroupUse"/>
    <!-- Forbid multiple use statements on same line -->
    <rule ref="SlevomatCodingStandard.Namespaces.MultipleUsesPerLine"/>
    <!-- Require newlines around namespace declaration -->
    <rule ref="SlevomatCodingStandard.Namespaces.NamespaceSpacing"/>
    <!-- Forbid useless alias for classes, constants, functions and traits functions -->
    <rule ref="WebimpressCodingStandard.Namespaces.RedundantAlias"/>
    <!-- Require the usage of assignment operators, eg `+=`, `.=` when possible -->
    <rule ref="SlevomatCodingStandard.Operators.RequireCombinedAssignmentOperator"/>
    <!-- Forbid `list(...)` syntax, use [...] instead -->
    <rule ref="SlevomatCodingStandard.PHP.ShortList"/>
    <!-- Forbid use of longhand cast operators -->
    <rule ref="SlevomatCodingStandard.PHP.TypeCast"/>
    <!-- Require presence of declare(strict_types=1) -->
    <rule ref="WebimpressCodingStandard.Files.DeclareStrictTypes"/>
    <!-- Format of strict type declaration -->
    <rule ref="WebimpressCodingStandard.PHP.DeclareStrictTypes"/>
    <!-- Forbid useless parentheses -->
    <rule ref="WebimpressCodingStandard.Formatting.RedundantParentheses"/>
    <!-- Forbid redundant semicolons -->
    <rule ref="WebimpressCodingStandard.PHP.RedundantSemicolon"/>
    <!-- Require use of short versions of scalar types (i.e. int instead of integer) -->
    <rule ref="SlevomatCodingStandard.TypeHints.LongTypeHints"/>
    <!-- Require ? when default value is null -->
    <rule ref="SlevomatCodingStandard.TypeHints.NullableTypeForNullDefaultValue"/>
    <!-- Disallow space after nullable operator -->
    <rule ref="PSR12.Functions.NullableTypeDeclaration"/>
    <!-- Require one space between typehint and variable, require no space between nullability sign and typehint -->
    <rule ref="SlevomatCodingStandard.TypeHints.ParameterTypeHintSpacing"/>
    <!-- Require space around colon in return types -->
    <rule ref="WebimpressCodingStandard.Formatting.ReturnType">
        <!-- Covered by Generic.PHP.LowerCaseType -->
        <exclude name="WebimpressCodingStandard.Formatting.ReturnType.LowerCaseSimpleType"/>
    </rule>
    <!-- Forbid useless variables -->
    <rule ref="SlevomatCodingStandard.Variables.UselessVariable"/>
    <!-- Forbid class being in a file with different name -->
    <rule ref="Squiz.Classes.ClassFileName"/>
    <!-- Force `self::` for self-reference, force lower-case self, forbid spaces around `::` -->
    <rule ref="Squiz.Classes.SelfMemberReference"/>
    <!-- Force phpDoc alignment -->
    <rule ref="Squiz.Commenting.DocCommentAlignment">
        <!-- Allow extra spaces after star, i.e. for indented annotations -->
        <exclude name="Squiz.Commenting.DocCommentAlignment.SpaceAfterStar"/>
    </rule>
    <!-- Force rules for function phpDoc -->
    <rule ref="PEAR.Commenting.FunctionComment">
        <!-- Allow `@throws` without description -->
        <exclude name="PEAR.Commenting.FunctionComment.EmptyThrows"/>
        <!-- Does not work properly with PHP 7 / short-named types -->
        <exclude name="PEAR.Commenting.FunctionComment.IncorrectParamVarName"/>
        <!-- Does not support collections, i.e. `string[]` -->
        <exclude name="PEAR.Commenting.FunctionComment.IncorrectTypeHint"/>
        <!-- Forces incorrect types -->
        <exclude name="PEAR.Commenting.FunctionComment.InvalidReturn"/>
        <!-- Breaks with compound return types, i.e. `string|null` -->
        <exclude name="PEAR.Commenting.FunctionComment.InvalidReturnNotVoid"/>
        <!-- Breaks when all params are not documented -->
        <exclude name="PEAR.Commenting.FunctionComment.InvalidTypeHint"/>
        <!-- Doc comment is not required for every method -->
        <exclude name="PEAR.Commenting.FunctionComment.Missing"/>
        <!-- Do not require comments for `@param` -->
        <exclude name="PEAR.Commenting.FunctionComment.MissingParamComment"/>
        <!-- Do not require `@param` for all parameters -->
        <exclude name="PEAR.Commenting.FunctionComment.MissingParamTag"/>
        <!-- Do not require `@return` for void methods -->
        <exclude name="PEAR.Commenting.FunctionComment.MissingReturn"/>
        <!-- Comments don't have to be sentences -->
        <exclude name="PEAR.Commenting.FunctionComment.ParamCommentFullStop"/>
        <!-- Comments don't have to be sentences -->
        <exclude name="PEAR.Commenting.FunctionComment.ParamCommentNotCapital"/>
        <!-- Breaks when all params are not documented -->
        <exclude name="PEAR.Commenting.FunctionComment.ParamNameNoMatch"/>
        <!-- Doesn't respect inheritance -->
        <exclude name="PEAR.Commenting.FunctionComment.ScalarTypeHintMissing"/>
        <!-- Throws comments can start without a capital and doesn't need a full stop -->
        <exclude name="PEAR.Commenting.FunctionComment.ThrowsNoFullStop"/>
        <exclude name="PEAR.Commenting.FunctionComment.ThrowsNotCapital"/>
        <!-- Doesn't work with self as typehint -->
        <exclude name="PEAR.Commenting.FunctionComment.TypeHintMissing"/>
    </rule>
    <!-- Forbid `AND` and `OR`, require `&&` and `||` -->
    <rule ref="Squiz.Operators.ValidLogicalOperators"/>
    <!-- Forbid `global` -->
    <rule ref="Squiz.PHP.GlobalKeyword"/>
    <!-- Require PHP function calls in lowercase -->
    <rule ref="Squiz.PHP.LowercasePHPFunctions"/>
    <!-- Forbid dead code -->
    <rule ref="Squiz.PHP.NonExecutableCode"/>
    <!-- Forbid `$this` inside static function -->
    <rule ref="Squiz.Scope.StaticThisUsage"/>
    <!-- Force whitespace before and after concatenation -->
    <rule ref="Squiz.Strings.ConcatenationSpacing">
        <properties>
            <property name="spacing" value="1"/>
            <property name="ignoreNewlines" value="true"/>
        </properties>
    </rule>
    <!-- Forbid strings in `"` unless necessary -->
    <rule ref="Squiz.Strings.DoubleQuoteUsage">
        <exclude name="Squiz.Strings.DoubleQuoteUsage.ContainsVar"></exclude>
    </rule>
    <!-- Forbid braces around string in `echo` -->
    <rule ref="Squiz.Strings.EchoedStrings"/>
    <!-- Forbid spaces in type casts -->
    <rule ref="Squiz.WhiteSpace.CastSpacing"/>
    <!-- Require space after language constructs -->
    <rule ref="Squiz.WhiteSpace.LanguageConstructSpacing"/>
    <!-- Require space around logical operators -->
    <rule ref="Squiz.WhiteSpace.LogicalOperatorSpacing"/>
    <!-- Forbid spaces around `->` operator -->
    <rule ref="Squiz.WhiteSpace.ObjectOperatorSpacing">
        <properties>
            <property name="ignoreNewlines" value="true"/>
        </properties>
    </rule>
    <!-- Forbid whitespace around double colon operator -->
    <rule ref="WebimpressCodingStandard.Formatting.DoubleColon"/>
    <!-- Forbid multiple spaces before and after operators -->
    <rule ref="Squiz.WhiteSpace.OperatorSpacing">
        <properties>
            <property name="ignoreNewlines" value="true"/>
        </properties>
    </rule>
    <!-- Forbid spaces before semicolon `;` -->
    <rule ref="Squiz.WhiteSpace.SemicolonSpacing"/>
    <!-- Forbid superfluous whitespaces -->
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace">
        <properties>
            <!-- turned on by PSR2 -> turning back off -->
            <property name="ignoreBlankLines" value="false"/>
        </properties>
    </rule>
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace.EmptyLines">
        <!-- turned off by PSR2 -> turning back on -->
        <severity>5</severity>
    </rule>
</ruleset>
